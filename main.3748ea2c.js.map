{"version":3,"sources":["scripts/main.js"],"names":["board","score","rows","columns","field","document","querySelector","button","messageStart","messageWin","messageLose","addEventListener","innerText","classList","contains","remove","add","setGame","enableEventListeners","Directions","ArrowLeft","ArrowRight","ArrowUp","ArrowDown","e","prevBoard","JSON","stringify","code","slideHorizontally","transpose","updateBoard","setNewNumber","Array","from","length","hasEmptyCell","found","row","Math","floor","random","cell","gameCell","cells","randomizeNumber","some","updateCell","num","className","toString","looseGame","slide","filteredRow","filter","i","push","isNextSame","isBelowSame","map","_","side","newRow","isMoveLeftOrUp","isMoveRightOrDown","reverse","forEach","rowIndex","cellIndex"],"mappings":"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","file":"main.3748ea2c.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nlet board;\nlet score = 0;\nconst rows = 4;\nconst columns = 4;\nconst field = document.querySelector('tbody');\nconst button = document.querySelector('.start');\nconst messageStart = document.querySelector('.message-start');\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\n\nbutton.addEventListener('click', () => {\n  score = 0;\n  document.querySelector('.game-score').innerText = score;\n\n  if (button.classList.contains('start')) {\n    button.classList.remove('start');\n    button.classList.add('restart');\n    button.innerText = 'Restart';\n    messageStart.classList.add('hidden');\n\n    setGame();\n    enableEventListeners();\n  } else {\n    messageWin.classList.add('hidden');\n    messageLose.classList.add('hidden');\n    setGame();\n  }\n});\n\nconst Directions = {\n  ArrowLeft: 'ArrowLeft',\n  ArrowRight: 'ArrowRight',\n  ArrowUp: 'ArrowUp',\n  ArrowDown: 'ArrowDown',\n};\n\nfunction enableEventListeners() {\n  document.addEventListener('keyup', (e) => {\n    const prevBoard = JSON.stringify(board);\n\n    if (e.code === Directions.ArrowLeft || e.code === Directions.ArrowRight) {\n      slideHorizontally(e.code);\n    }\n\n    if (e.code === Directions.ArrowUp || e.code === Directions.ArrowDown) {\n      transpose();\n      slideHorizontally(e.code);\n      transpose();\n    }\n\n    updateBoard();\n\n    const currentBoard = JSON.stringify(board);\n\n    if (prevBoard !== currentBoard) {\n      setNewNumber();\n    }\n\n    document.querySelector('.game-score').innerText = score;\n  });\n}\n\nfunction setGame() {\n  board = Array.from({ length: rows },\n    () => Array.from({ length: columns }, () => 0));\n\n  updateBoard();\n  setNewNumber();\n  setNewNumber();\n}\n\nfunction setNewNumber() {\n  if (!hasEmptyCell()) {\n    return;\n  }\n\n  let found = false;\n\n  while (!found) {\n    const row = Math.floor(Math.random() * rows);\n    const cell = Math.floor(Math.random() * columns);\n\n    if (board[row][cell] === 0) {\n      const gameCell = field.rows[row].cells[cell];\n\n      board[row][cell] = randomizeNumber();\n      gameCell.innerText = board[row][cell];\n      gameCell.classList.add(`field-cell--${board[row][cell]}`);\n\n      found = true;\n    }\n  }\n}\n\nfunction hasEmptyCell() {\n  return board.some(row => row.some(cell => cell === 0));\n}\n\nfunction updateCell(cell, num) {\n  cell.innerText = '';\n  cell.className = 'field-cell';\n\n  if (num > 0) {\n    cell.innerText = num.toString();\n    cell.classList.add(`field-cell--${num}`);\n\n    if (num === 2048) {\n      messageWin.classList.remove('hidden');\n    }\n  }\n\n  looseGame();\n}\n\nfunction slide(row) {\n  let filteredRow = row.filter(num => num !== 0);\n\n  for (let i = 0; i < filteredRow.length - 1; i++) {\n    if (filteredRow[i] === filteredRow[i + 1]) {\n      filteredRow[i] *= 2;\n      filteredRow[i + 1] = 0;\n      score += filteredRow[i];\n    }\n  }\n\n  filteredRow = filteredRow.filter(num => num !== 0);\n\n  while (filteredRow.length < columns) {\n    filteredRow.push(0);\n  }\n\n  return filteredRow;\n}\n\nfunction randomizeNumber() {\n  return Math.random() >= 0.9 ? 4 : 2;\n}\n\nfunction looseGame() {\n  if (hasEmptyCell()) {\n    return;\n  }\n\n  for (let row = 0; row < rows; row++) {\n    for (let cell = 0; cell < columns - 1; cell++) {\n      const isNextSame = board[row][cell] === board[row][cell + 1];\n      const isBelowSame = board[cell][row] === board[cell + 1][row];\n\n      if (isNextSame || isBelowSame) {\n        return;\n      }\n    }\n  }\n\n  messageLose.classList.remove('hidden');\n}\n\nfunction transpose() {\n  board = board[0].map((_, i) => board.map(row => row[i]));\n}\n\nfunction slideHorizontally(side) {\n  for (let row = 0; row < rows; row++) {\n    let newRow = [...board[row]];\n\n    if (isMoveLeftOrUp(side)) {\n      newRow = slide(newRow);\n    }\n\n    if (isMoveRightOrDown(side)) {\n      newRow.reverse();\n      newRow = slide(newRow);\n      newRow.reverse();\n    }\n\n    board[row] = newRow;\n\n    for (let cell = 0; cell < columns; cell++) {\n      const gameCell = field.rows[row].cells[cell];\n      const num = board[row][cell];\n\n      updateCell(gameCell, num);\n    }\n  }\n}\n\nfunction isMoveLeftOrUp(side) {\n  return side === Directions.ArrowLeft || side === Directions.ArrowUp;\n}\n\nfunction isMoveRightOrDown(side) {\n  return side === Directions.ArrowRight || side === Directions.ArrowDown;\n}\n\nfunction updateBoard() {\n  board.forEach((row, rowIndex) => {\n    row.forEach((cell, cellIndex) => {\n      updateCell(field.rows[rowIndex].cells[cellIndex], cell);\n    });\n  });\n}\n"]}